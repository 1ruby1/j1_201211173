package myCal;

import java.util.ArrayList;
import java.util.StringTokenizer;


public class MyCalculator{

	private final String str;
	private double result;
	
	public MyCalculator(String str){
		this.str = str;
		this.result = 0;
	}

	public void calculate(){
	
		StringTokenizer tokens = new StringTokenizer(str, "+-", true);
		String s;
		double res=0,tmp=0;
		String preOp="+";
		
		while(tokens.hasMoreElements()){
			s = tokens.nextToken();
			if(s.equals("+")){
				preOp = s;
			}else if(s.equals("-")){
				preOp = s;
			}else {
				tmp=this.calculateToken(s);
				if(preOp.equals("+")){
					res*=tmp;
				}else if(preOp.equals("-")){
					res/=tmp;
				}
			}
		}
				
	}
	public double calculateToken(String token){
		StringTokenizer tokens = new StringTokenizer(token, "*/", true);
		String s;
		double res=1,tmp=0;
		String preOp="*";
		
		while(tokens.hasMoreElements()){
			s = tokens.nextToken();
			if(s.equals("*")){
				preOp = s;
			}else if(s.equals("/")){
				preOp = s;
			}else {
				tmp=this.calculateSubToken(s);
				if(preOp.equals("*")){
					res*=tmp;
				}else if(preOp.equals("/")){
					res/=tmp;
				}
			}
		}
		return res;
	}
	
	public double calculateSubToken(String subToken){
		
		StringTokenizer token_3 = new StringTokenizer(subToken, "meical^!", true);  
		ArrayList<String> token_3_list = new ArrayList<String>();
		while(token_3.hasMoreElements()){
			token_3_list.add(token_3.nextToken());
		}
		
		if(token_3_list.size()>1){
			for(int i=0;i<token_3_list.size();i++){
				switch (token_3_list.get(i)) {
				case "^":return this.calculatePOW(subToken);
				case "m":return this.calculateMod(subToken);
				case "e":return this.calculateEXP(subToken);
				case "i":return this.calculateSIN(subToken); //sin
				case "c":return this.calculateCOS(subToken); //cos
				case "t":return this.calculateTAN(subToken); //tan
				case "g":return this.calculateLOG(subToken); //log
				case "n":{
					if(token_3_list.get(i-1).substring(token_3_list.get(i-1).length()-1, token_3_list.get(i-1).length()).equals("l"));
					return this.calculateLN(subToken); //ln
					}
				case "!":return this.calculateMULS(subToken); //!
				}
			}
		}
				
		return Double.parseDouble(token_3_list.get(0));	
	}
	public double calculateMod(String mod_str){
		
		StringTokenizer modToken = new StringTokenizer(mod_str, "mod", false);
		double a=1,b=1;
		while(modToken.hasMoreElements()){
			a = Double.parseDouble(modToken.nextToken());
			b = Double.parseDouble(modToken.nextToken());
		}
		
		return a%b;	
	}
	public double calculateSIN(String sin_str){
			
			StringTokenizer modToken = new StringTokenizer(sin_str, "sin", false);
			double a=1;
			while(modToken.hasMoreElements()){
				a = Double.parseDouble(modToken.nextToken());
			}
			double b = Math.toRadians(a);
			return Math.sin(b);	
		}
	public double calculateCOS(String cos_str){
		
		StringTokenizer modToken = new StringTokenizer(cos_str, "cos", false);
		double a=1;
		while(modToken.hasMoreElements()){
			a = Double.parseDouble(modToken.nextToken());
		}
		
		double b = Math.toRadians(a);
		return Math.cos(b);	
	}
	public double calculateTAN(String tan_str){
		
		StringTokenizer modToken = new StringTokenizer(tan_str, "tan", false);
		double a=1;
		while(modToken.hasMoreElements()){
			a = Double.parseDouble(modToken.nextToken());
		}
		
		double b = Math.toRadians(a);
		return Math.tan(b);	
	}
	public double calculateEXP(String exp_str){
		
		StringTokenizer modToken = new StringTokenizer(exp_str, "exp", false);
		double a=1;
		while(modToken.hasMoreElements()){
			a = Double.parseDouble(modToken.nextToken());
		}
		
		return Math.exp(a);	
	}
	public double calculatePOW(String pow_str){
		
		StringTokenizer modToken = new StringTokenizer(pow_str, "^", false);
		double a=1,b=1;
		while(modToken.hasMoreElements()){
			a = Double.parseDouble(modToken.nextToken());
			b = Double.parseDouble(modToken.nextToken());
		}
		
		return Math.pow(a,b);	
	}
	public double calculateLN(String ln_str){
		
		StringTokenizer modToken = new StringTokenizer(ln_str, "ln", false);
		double a=1;
		while(modToken.hasMoreElements()){
			a = Double.parseDouble(modToken.nextToken());
		}
		
		return Math.log(a);	
	}
	public double calculateMULS(String muls_str){
		
		StringTokenizer modToken = new StringTokenizer(muls_str, "!", false);
		double a=1,res=0;
		int i=0;
		while(modToken.hasMoreElements()){
			a = Double.parseDouble(modToken.nextToken());
		}
		i = (int) Math.floor(a);
		res=1;
		for(;i>=1;i--){
			res*=a;
			a-=1;
		}
		return res;	
	}
	public double calculateLOG(String log_str){
		
		StringTokenizer modToken = new StringTokenizer(log_str, "log", false);
		double a=1;
		while(modToken.hasMoreElements()){
			a = Double.parseDouble(modToken.nextToken());
		}
		
		return Math.log10(a);	
	}
	public String getStr() {
		return str;
	}

	public double getResult() {
		return result;
	}

	public void setResult(double result) {
		this.result = result;
	}
	
}
